git branch
By default, every Git repository has a branch called master (which is why you have been seeing that word in Git's output in previous lessons). To list all of the branches in a repository, you can run the command git branch. The branch you are currently in will be shown with a * beside its name.

git diff revision-1..revision-2 shows the difference between two versions of a repository, git diff branch-1..branch-2 shows the difference between two branches.

How can I switch from one branch to another?
You previously used git checkout with a commit hash to switch the repository state to that hash. You can also use git checkout with the name of a branch to switch to that branch.

Two notes:

When you run git branch, it puts a * beside the name of the branch you are currently in.
Git will only let you do this if all of your changes have been committed. You can get around this, but it is outside the scope of this course.
In this exercise, you'll also make use of git rm. This removes the file (just like the shell command rm) then stages the removal of that file with git add, all in one step.
git rm

git commit -m ""
git commit --amend -m ""


In the previous exercise, you used git checkout branch-name to switch to a branch. To create a branch then switch to it in one step, you add a -b flag, calling git checkout -b branch-name,

The contents of the new branch are initially identical to the contents of the original. Once you start making changes, they only affect the new branch.
git checkout -b newbranch

To merge two branches, you run git merge source destination (without .. between the two branch names). Git automatically opens an editor so that you can write a log message for the merge; you can either keep its default message or fill in something more informative.
git merge XXX XXX
git merge summary-statistics master -m "Merging summary statistics"
if conflits here
git status
nano XXXX (eg.the conflict branch like report.txt) Ctrl+K: delete line, Crtl+O+enter: save, Ctrl+X: exit
git add  
git commit






